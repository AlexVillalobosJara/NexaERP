// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexaERP.Infrastructure.Data.Context;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(NexaErpDbContext))]
    [Migration("20250826221120_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Organization.Bodega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.ToTable("Bodegas");
                });

            modelBuilder.Entity("Core.Entities.Organization.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CiudadCasaMatriz")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodigoSII")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ComunaCasaMatriz")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DireccionCasaMatriz")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaResolucionSII")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormatoFecha")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("dd/MM/yyyy");

                    b.Property<string>("Giro")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ManejaLotes")
                        .HasColumnType("bit");

                    b.Property<bool>("ManejaSeries")
                        .HasColumnType("bit");

                    b.Property<bool>("ManejaUbicaciones")
                        .HasColumnType("bit");

                    b.Property<int>("MaximoIntentosLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("MetodoValorizacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("MonedaPrincipalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("NombreComercial")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("PermiteInventarioNegativo")
                        .HasColumnType("bit");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RegionCasaMatriz")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiereAutenticacionDosFactor")
                        .HasColumnType("bit");

                    b.Property<string>("ResolucionSII")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RutEmpresa")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SeparadorDecimal")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue(",");

                    b.Property<string>("SitioWeb")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("TiempoBloqueoTemporalMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<int>("TiempoExpiracionSesion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(480);

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Empresas_Activo");

                    b.HasIndex("FechaCreacion")
                        .HasDatabaseName("IX_Empresas_FechaCreacion");

                    b.HasIndex("RazonSocial")
                        .HasDatabaseName("IX_Empresas_RazonSocial");

                    b.HasIndex("RutEmpresa")
                        .IsUnique()
                        .HasDatabaseName("UK_Empresas_RutEmpresa");

                    b.ToTable("Empresas", null, t =>
                        {
                            t.HasCheckConstraint("CK_Empresas_MaximoIntentos", "[MaximoIntentosLogin] BETWEEN 3 AND 10");

                            t.HasCheckConstraint("CK_Empresas_SeparadorDecimal", "[SeparadorDecimal] IN (',', '.')");

                            t.HasCheckConstraint("CK_Empresas_TiempoBloqueo", "[TiempoBloqueoTemporalMinutos] > 0");

                            t.HasCheckConstraint("CK_Empresas_TiempoExpiracion", "[TiempoExpiracionSesion] BETWEEN 30 AND 1440");
                        });
                });

            modelBuilder.Entity("Core.Entities.Organization.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId")
                        .HasDatabaseName("IX_Sucursales_EmpresaId");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("Core.Entities.Security.AuditoriaAcceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DatosAdicionales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DireccionIP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Exitoso")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("MensajeError")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TipoEvento")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DireccionIP")
                        .HasDatabaseName("IX_AuditoriaAccesos_DireccionIP");

                    b.HasIndex("Exitoso")
                        .HasDatabaseName("IX_AuditoriaAccesos_Exitoso");

                    b.HasIndex("FechaEvento")
                        .HasDatabaseName("IX_AuditoriaAccesos_FechaEvento");

                    b.HasIndex("TipoEvento")
                        .HasDatabaseName("IX_AuditoriaAccesos_TipoEvento");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_AuditoriaAccesos_UsuarioId");

                    b.HasIndex("FechaEvento", "TipoEvento", "Exitoso")
                        .HasDatabaseName("IX_AuditoriaAccesos_FechaTipoExitoso");

                    b.ToTable("AuditoriaAccesos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Security.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EsPermisoSistema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Permisos_Activo");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_Permisos_Categoria");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("UK_Permisos_Codigo");

                    b.HasIndex("Modulo")
                        .HasDatabaseName("IX_Permisos_Modulo");

                    b.ToTable("Permisos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Security.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("EsAdministrador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsRolSistema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PuedeGestionarRoles")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("PuedeGestionarUsuarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("PuedeVerTodosLosDatos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Roles_Activo");

                    b.HasIndex("EmpresaId")
                        .HasDatabaseName("IX_Roles_EmpresaId");

                    b.HasIndex("EsRolSistema")
                        .HasDatabaseName("IX_Roles_EsRolSistema")
                        .HasFilter("[EsRolSistema] = 1");

                    b.HasIndex("EmpresaId", "Nombre")
                        .IsUnique()
                        .HasDatabaseName("UK_Roles_EmpresaNombre");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Security.RolPermiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Concedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PermisoId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioAsignacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermisoId")
                        .HasDatabaseName("IX_RolesPermisos_PermisoId");

                    b.HasIndex("RolId")
                        .HasDatabaseName("IX_RolesPermisos_RolId");

                    b.HasIndex("RolId", "PermisoId")
                        .IsUnique()
                        .HasDatabaseName("UK_RolesPermisos_RolPermiso");

                    b.ToTable("RolesPermisos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Security.SesionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DireccionIP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Dispositivo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioSesion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("FechaUltimaActividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Navegador")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RazonCierre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SesionActiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SistemaOperativo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TokenSesion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DireccionIP")
                        .HasDatabaseName("IX_SesionesUsuario_DireccionIP");

                    b.HasIndex("FechaExpiracion")
                        .HasDatabaseName("IX_SesionesUsuario_FechaExpiracion");

                    b.HasIndex("SesionActiva")
                        .HasDatabaseName("IX_SesionesUsuario_SesionActiva");

                    b.HasIndex("TokenSesion")
                        .IsUnique()
                        .HasDatabaseName("UK_SesionesUsuario_Token");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_SesionesUsuario_UsuarioId");

                    b.ToTable("SesionesUsuario", null, t =>
                        {
                            t.HasCheckConstraint("CK_SesionesUsuario_FechasValidas", "[FechaExpiracion] > [FechaInicioSesion]");

                            t.HasCheckConstraint("CK_SesionesUsuario_RazonCierre", "([SesionActiva] = 1 AND [FechaCierre] IS NULL AND [RazonCierre] IS NULL) OR ([SesionActiva] = 0 AND [FechaCierre] IS NOT NULL AND [RazonCierre] IS NOT NULL)");

                            t.HasCheckConstraint("CK_SesionesUsuario_RazonCierreValores", "[RazonCierre] IS NULL OR [RazonCierre] IN ('LOGOUT', 'TIMEOUT', 'FORCE_CLOSE', 'EXPIRED')");
                        });
                });

            modelBuilder.Entity("Core.Entities.Security.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("AutenticacionDobleFactorHabilitada")
                        .HasColumnType("bit");

                    b.Property<string>("CodigosRecuperacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CuentaBloqueada")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerificado")
                        .HasColumnType("bit");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaBloqueoCuenta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("FechaExpiracionPassword")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaExpiracionTokenRecuperacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUltimoLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUltimoLoginFallido")
                        .HasColumnType("datetime2");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("es-CL");

                    b.Property<int>("IntentosLoginFallidos")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("RequiereCambioPassword")
                        .HasColumnType("bit");

                    b.Property<string>("RutPersona")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecretoTOTP")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TokenRecuperacion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TokenVerificacionEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UsuarioCreacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioModificacion")
                        .HasColumnType("int");

                    b.Property<string>("ZonaHoraria")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("America/Santiago");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Usuarios_Activo");

                    b.HasIndex("CuentaBloqueada")
                        .HasDatabaseName("IX_Usuarios_CuentaBloqueada")
                        .HasFilter("[CuentaBloqueada] = 1");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_Usuarios_Email");

                    b.HasIndex("EmpresaId")
                        .HasDatabaseName("IX_Usuarios_EmpresaId");

                    b.HasIndex("TokenRecuperacion")
                        .HasDatabaseName("IX_Usuarios_TokenRecuperacion")
                        .HasFilter("[TokenRecuperacion] IS NOT NULL");

                    b.HasIndex("EmpresaId", "NombreUsuario")
                        .IsUnique()
                        .HasDatabaseName("UK_Usuarios_EmpresaNombreUsuario");

                    b.ToTable("Usuarios", null, t =>
                        {
                            t.HasCheckConstraint("CK_Usuarios_Idioma", "[Idioma] IN ('es-CL', 'es-ES', 'en-US')");

                            t.HasCheckConstraint("CK_Usuarios_IntentosLogin", "[IntentosLoginFallidos] >= 0 AND [IntentosLoginFallidos] <= 10");
                        });
                });

            modelBuilder.Entity("Core.Entities.Security.UsuarioRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("BodegaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioAsignacion")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_UsuariosRoles_Activo");

                    b.HasIndex("BodegaId");

                    b.HasIndex("FechaVencimiento")
                        .HasDatabaseName("IX_UsuariosRoles_Vigencia")
                        .HasFilter("[FechaVencimiento] IS NOT NULL");

                    b.HasIndex("RolId")
                        .HasDatabaseName("IX_UsuariosRoles_RolId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_UsuariosRoles_UsuarioId");

                    b.HasIndex("UsuarioId", "RolId", "SucursalId", "BodegaId")
                        .IsUnique()
                        .HasDatabaseName("UK_UsuariosRoles_UsuarioRolSucursalBodega")
                        .HasFilter("[SucursalId] IS NOT NULL AND [BodegaId] IS NOT NULL");

                    b.ToTable("UsuariosRoles", null, t =>
                        {
                            t.HasCheckConstraint("CK_UsuariosRoles_VencimientoValido", "[FechaVencimiento] IS NULL OR [FechaVencimiento] > [FechaAsignacion]");
                        });
                });

            modelBuilder.Entity("Core.Entities.Organization.Bodega", b =>
                {
                    b.HasOne("Core.Entities.Organization.Sucursal", "Sucursal")
                        .WithMany("Bodegas")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Core.Entities.Organization.Sucursal", b =>
                {
                    b.HasOne("Core.Entities.Organization.Empresa", "Empresa")
                        .WithMany("Sucursales")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Core.Entities.Security.AuditoriaAcceso", b =>
                {
                    b.HasOne("Core.Entities.Security.Usuario", "Usuario")
                        .WithMany("AuditoriasAcceso")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Entities.Security.Rol", b =>
                {
                    b.HasOne("Core.Entities.Organization.Empresa", "Empresa")
                        .WithMany("Roles")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Core.Entities.Security.RolPermiso", b =>
                {
                    b.HasOne("Core.Entities.Security.Permiso", "Permiso")
                        .WithMany("RolPermisos")
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Security.Rol", "Rol")
                        .WithMany("RolPermisos")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Core.Entities.Security.SesionUsuario", b =>
                {
                    b.HasOne("Core.Entities.Security.Usuario", "Usuario")
                        .WithMany("Sesiones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Entities.Security.Usuario", b =>
                {
                    b.HasOne("Core.Entities.Organization.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Core.Entities.Security.UsuarioRol", b =>
                {
                    b.HasOne("Core.Entities.Organization.Bodega", "Bodega")
                        .WithMany()
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Security.Rol", "Rol")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Organization.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Security.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bodega");

                    b.Navigation("Rol");

                    b.Navigation("Sucursal");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Core.Entities.Organization.Empresa", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Sucursales");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Core.Entities.Organization.Sucursal", b =>
                {
                    b.Navigation("Bodegas");
                });

            modelBuilder.Entity("Core.Entities.Security.Permiso", b =>
                {
                    b.Navigation("RolPermisos");
                });

            modelBuilder.Entity("Core.Entities.Security.Rol", b =>
                {
                    b.Navigation("RolPermisos");

                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Core.Entities.Security.Usuario", b =>
                {
                    b.Navigation("AuditoriasAcceso");

                    b.Navigation("Sesiones");

                    b.Navigation("UsuarioRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
